design-code-test, o dct de ahora en adelante. el problema del dct 
es la d. el hecho de tener que cambiarla. cambiar el codigo 
quehas escrito. in englglish, from now on. design is the part of 
dct that bothers me the most, because it is the part of the 
programming in which you have to use your creative and 
imaginative skills to produce some kind of wonder. but the sad 
part of this process is what i have called "divide and conquer", 
a serie of subdivisions that actual application develolplent 
model is requesting. i have it in my ideas_tree link in home. 
when you have to think onnly on the main logic, it becomes easy 
to solve a problem, but the problem is that theere are many ways 
to solve a problem in programming, and the difficult part is to 
work the dct according to the possibilities of expansion that d$c 
states (devid&conquer). I whant to know what I will do. you only 
know how to complainn about your own limitations. originality is 
overrated, and so many people can't be that wrong. try to flow or 
follow the flow of the current.. it is a picture too big for me, 
now i want to use google trends to compare between ror and cke. 
let me check it... enough for trendes and java.. now what i want 
is to support the part about design. and don't talk me about 
"turning on the pixel", because it is no the same thingyou can 
suse the pixel theory to solve the first problem, and then you 
fix it. whaty??!! writing two times!! well, it is analogous to a 
letter... but iwll get lost in the process. then tray no to get 
lost. so, it seems that you will suffer inside the car of ooze 
today. and the suffering still continues, but I stated some time 
ago that you must light the pixel, or forget about it. man, what 
about design? write a letter! 

